# -*- coding: utf-8 -*-
"""
Created on Sun May  4 16:53:56 2025

@author: Kavana Pullaganti Sathyanarayana
"""

# -*- coding: utf-8 -*-

from pulp import *
from pulp import LpProblem, LpVariable, lpSum, LpMinimize

#Service Nodes
nodes = ['0','1A','1B','2A','2B','3','4','5']

#Valid arcs from Space-Time Network diagram
Valid_Arcs = [('0','1A'), ('0','1B'), ('0','2A'), ('0','2B'), ('0','3'), ('0','4'), ('0','5'),
('1A','0'), ('1B','0'), ('2A','0'), ('2B','0'), ('3','0'), ('4','0'), ('5','0'),
('1A','2A'), ('1A','2B'), ('1A','3'), ('1A','4'), ('1A','5'),
('1B','2B'), ('1B','3'), ('1B','5'),
('2A','3'), ('2A','5'),
('3','2B'), ('3','5'),
('4','2A'), ('4','2B'), ('4','5'),
('5','2B')]

#Travel Time between the nodes
Travel_Time = {
    ('0','1A'):114, ('0','1B'):114, ('0','2A'):18, ('0','2B'):18, ('0','3'):9, ('0','4'):96, ('0','5'):18,
    ('1A','0'):114, ('1B','0'):114, ('2A','0'):18, ('2B','0'):18, ('3','0'):9, ('4','0'):96, ('5','0'):18,
    ('1A','2A'):99, ('1A','2B'):99, ('1A','3'):120, ('1A','4'):180, ('1A','5'):129,
    ('1B','2B'):99, ('1B','3'):120, ('1B','5'):129,
    ('2A','3'):24, ('2A','5'):15,
    ('3','2B'):24, ('3','5'):21,
    ('4','2A'):96, ('4','2B'):96, ('4','5'):111,
    ('5','2B'):15
}

#Demand at each node
Demand = {'0': 0, '1A': 10, '1B': 15, '2A': 8, '2B': 6, '3': 7, '4': 12, '5': 20}

#Maximum Vehicle capacity
Vehicle_capacity = 30

#BigM variable W used to linearize the Capacity constraints. W = Vehicle_capacity
W = 30

#Minimum and maximum Battery Capacity of the Vehicle
B_min, B_max = 5, 250

#BigM variable M used to linearize the battery constraints. M = Bmax
M = 250

# battery_nodes represent the battery level at each node.
# battery_nodes = '0X' represents the battery at 0 (depot) for return arcs.
battery_nodes = ['0','1A','1B','2A','2B','3','4','5','01A','01B','02A','02B','03','04','05']
return_arcs = [('1A','01A'), ('1B','01B'), ('2A','02A'), ('2B','02B'), ('3','03'), ('4','04'), ('5','05')]

# LP Decision Variables

# X_ij is 1 if a vehicle travels directly from node i to node j, and 0 otherwise.
x = pulp.LpVariable.dicts("x", Valid_Arcs, cat='Binary')

# Recharge trigger variable. r[i,j] = 1 if the recharge is triggered, 0 otherwise. Given that X[i,j] =1
r = pulp.LpVariable.dicts("r", Valid_Arcs, cat='Binary')

# Battery capacity b at each node.
b = pulp.LpVariable.dicts("b", battery_nodes, lowBound=0, upBound=B_max)

# V[j] gives the vehicle capacity at node j
Vj = pulp.LpVariable.dicts("V", nodes, lowBound=0, upBound=Vehicle_capacity)

# Y[i,j] is used to linearize V[i,j]*X[i,j]
Y = pulp.LpVariable.dicts("Y", Valid_Arcs, lowBound=0)

# Recharge constraint for return arcs. rr[i,j] = 1 if the recharge is triggered, 0 otherwise. Given that X[i,j] =1
rr = pulp.LpVariable.dicts("rr", return_arcs, cat='Binary')


# Minimization LP
model = LpProblem("ISE247 Group9 Project", LpMinimize)

# Objective Function
model += pulp.lpSum(Travel_Time[i,j] * x[i,j] for (i,j) in Valid_Arcs)

# Constraints:
# Incoming flow: Each customer (except depot) must be visited once
for j in nodes:
    if j != '0':  # depot node '0'
        model += pulp.lpSum(x[i,j] for (i,jj) in Valid_Arcs if jj == j) == 1

# Outgoing flow: Each customer (except depot) must be departed once
for j in nodes:
    if j != '0':
        model += pulp.lpSum(x[j,k] for (jj,k) in Valid_Arcs if jj == j) == 1

# Vehicle Capacity at depot is set to 0        
model += Vj['0'] == 0
        
# Linearized vehicle capacity constraints:
#1. Y_ij <= V_i
for (i,j) in Valid_Arcs:
    if j != '0':
        model += Y[(i,j)] <= Vj[i]

# 2. Y_ij >= 0  --> already ensured by variable definition in PuLP (lowBound=0)

# 3. Activation constraint: Y_ij >= V_i + W(x_ij - 1) --> W is the BigM variable. W=Vehicle_capacity
for (i, j) in Valid_Arcs:
    if j != '0':  # Skip arcs that end at depot
        model += Y[(i,j)] >= Vj[i] + W * (x[(i,j)] - 1)
        
# 4. Flow link: Y_ij <= W x_ij
for (i, j) in Valid_Arcs:
    if j != '0':  # Skip arcs that end at depot
        model += Y[(i,j)] <= W * x[(i,j)]

# 5. Vehicle load at node j after arriving
for j in nodes:
    if j != '0':
        model += Vj[j] == pulp.lpSum(Y[(i,j)] for (i,jj) in Valid_Arcs if jj == j) + Demand[j]

# 6. vehicle capacity at any node is less than or equal to the total vehicle capacity
for j in nodes:
    model += Vj[j] <= Vehicle_capacity

#Linearized Battery flow constraints:
# 1. Battery capacity at the depot is set to Bmax = 250 units of time
model += b['0'] == B_max

# 2. Recharge Trigger is activated only on the selected routes.
for (i, j) in Valid_Arcs:
    if j != '0': # Constraints for return arcs are considered separately. 
        model += r[i, j] <= x[i, j]

#Hardcoded constraints for return arcs:
    
model += rr[('1A','01A')] <= x[('1A','0')]
model += rr[('1B','01B')] <= x[('1B','0')]
model += rr[('2A','02A')] <=  x[('2A','0')]
model += rr[('2B','02B')] <= x[('2B','0')]
model += rr[('3','03')] <= x[('3','0')]
model += rr[('4','04')] <= x[('4','0')]
model += rr[('5','05')] <= x[('5','0')]


# 2. Battery flow constraint. B_max = M

for (i, j) in Valid_Arcs:
    if j != '0': # Constraints for return arcs are considered separately.
        model += b[j] <= b[i] - Travel_Time[(i,j)] + B_max * r[(i,j)] + B_max * (1 - x[(i,j)])


for (i, j) in Valid_Arcs:
    if j != '0': # Constraints for return arcs are considered separately.
        model += b[j] >= b[i] - Travel_Time[(i,j)] + B_max * r[(i,j)] - B_max * (1 - x[(i,j)])

#Hardcoded constraints for return arcs:

model += b['01A'] <= b['1A'] - Travel_Time[('1A','0')] + B_max * rr[('1A','01A')] + B_max * (1 - x[('1A','0')])
model += b['01B'] <= b['1B'] - Travel_Time[('1B','0')] + B_max * rr[('1B','01B')] + B_max * (1 - x[('1B','0')])
model += b['02A'] <= b['2A'] - Travel_Time[('2A','0')] + B_max * rr[('2A','02A')] + B_max * (1 - x[('2A','0')])
model += b['02B'] <= b['2B'] - Travel_Time[('2B','0')] + B_max * rr[('2B','02B')] + B_max * (1 - x[('2B','0')])
model += b['03']  <= b['3'] - Travel_Time[('3','0')]  + B_max * rr[('3','03')]  + B_max * (1 - x[('3','0')])
model += b['04']  <= b['4'] - Travel_Time[('4','0')]  + B_max * rr[('4','04')]  + B_max * (1 - x[('4','0')])
model += b['05']  <= b['5'] - Travel_Time[('5','0')]  + B_max * rr[('5','05')]  + B_max * (1 - x[('5','0')])


model += b['01A'] >= b['1A'] - Travel_Time[('1A','0')] + B_max * rr[('1A','01A')] - B_max * (1 - x[('1A','0')])
model += b['01B'] >= b['1B'] - Travel_Time[('1B','0')] + B_max * rr[('1B','01B')] - B_max * (1 - x[('1B','0')])
model += b['02A'] >= b['2A'] - Travel_Time[('2A','0')] + B_max * rr[('2A','02A')] - B_max * (1 - x[('2A','0')])
model += b['02B'] >= b['2B'] - Travel_Time[('2B','0')] + B_max * rr[('2B','02B')] - B_max * (1 - x[('2B','0')])
model += b['03']  >= b['3'] - Travel_Time[('3','0')]  + B_max * rr[('3','03')]  - B_max * (1 - x[('3','0')])
model += b['04']  >= b['4'] - Travel_Time[('4','0')]  + B_max * rr[('4','04')]  - B_max * (1 - x[('4','0')])
model += b['05']  >= b['5'] - Travel_Time[('5','0')]  + B_max * rr[('5','05')]  - B_max * (1 - x[('5','0')])


# 2. Recharge trigger constraint

for (i, j) in Valid_Arcs:
    if j != '0': 
        model += b[i] - Travel_Time[(i,j)] <= B_min + 1e-2 + B_max * (1 - r[(i,j)]) #Recharge trigger. B_max = M
        #Buffer(1e-2) is used to ensure strict inequality

#Hardcoded constraints for return arcs:
model += b['1A'] - Travel_Time[('1A','0')] <= B_min + 1e-2 +  B_max * (1 - rr[('1A','01A')])
model += b['1B'] - Travel_Time[('1B','0')] <= B_min + 1e-2 +  B_max * (1 - rr[('1B','01B')])
model += b['2A'] - Travel_Time[('2A','0')] <= B_min + 1e-2 +  B_max * (1 - rr[('2A','02A')])
model += b['2B'] - Travel_Time[('2B','0')] <= B_min + 1e-2 +  B_max * (1 - rr[('2B','02B')])
model += b['3']  - Travel_Time[('3','0')]  <= B_min + 1e-2 +  B_max * (1 - rr[('3','03')])
model += b['4']  - Travel_Time[('4','0')]  <= B_min + 1e-2 +  B_max * (1 - rr[('4','04')])
model += b['5']  - Travel_Time[('5','0')]  <= B_min + 1e-2 +  B_max * (1 - rr[('5','05')])


# LP Solve
model.solve()

# Print results
print(f"Status: {model.status}")
print(f"Total Cost: {model.objective.value()}")
##########################################
#######   Status: 1         #######
#######   Optimal Cost = 687.0   #######

# Print variables results
for v in model.variables():
    print(f"{v.name}: {v.varValue}")

#V_0: 0.0
#V_1A: 10.0
##V_1B: 15.0
#V_2A: 30.0
#V_2B: 21.0
#V_3: 7.0
#V_4: 22.0
#V_5: 27.0
#Y_('0',_'1A'): 0.0
#Y_('0',_'1B'): 0.0
#Y_('0',_'2A'): 0.0
#Y_('0',_'2B'): 0.0
#Y_('0',_'3'): 0.0
#Y_('0',_'4'): 0.0
#Y_('0',_'5'): 0.0
#Y_('1A',_'2A'): 0.0
#Y_('1A',_'2B'): 0.0
#Y_('1A',_'3'): 0.0
#Y_('1A',_'4'): 10.0
#Y_('1A',_'5'): 0.0
#Y_('1B',_'2B'): 15.0
#Y_('1B',_'3'): 0.0
#Y_('1B',_'5'): 0.0
#Y_('2A',_'3'): 0.0
#Y_('2A',_'5'): 0.0
#Y_('3',_'2B'): 0.0
#Y_('3',_'5'): 7.0
#Y_('4',_'2A'): 22.0
#Y_('4',_'2B'): 0.0
#Y_('4',_'5'): 0.0
#Y_('5',_'2B'): 0.0
#b_0: 250.0
#b_01A: 0.0
#b_01B: 0.0
#b_02A: 92.0
#b_02B: 19.0
#b_03: 0.0
#b_04: 0.0
#b_05: 202.0
#b_1A: 136.0
#b_1B: 136.0
#b_2A: 110.0
#b_2B: 37.0
#b_3: 241.0
#b_4: 206.0
#b_5: 220.0
#r_('0',_'1A'): 0.0
#r_('0',_'1B'): 0.0
#r_('0',_'2A'): 0.0
#r_('0',_'2B'): 0.0
#r_('0',_'3'): 0.0
#r_('0',_'4'): 0.0
#r_('0',_'5'): 0.0
#r_('1A',_'2A'): 0.0
#r_('1A',_'2B'): 0.0
#r_('1A',_'3'): 0.0
#r_('1A',_'4'): 1.0
#r_('1A',_'5'): 0.0
#r_('1B',_'2B'): 0.0
#r_('1B',_'3'): 0.0
#r_('1B',_'5'): 0.0
#r_('2A',_'3'): 0.0
#r_('2A',_'5'): 0.0
#r_('3',_'2B'): 0.0
#r_('3',_'5'): 0.0
#r_('4',_'2A'): 0.0
#r_('4',_'2B'): 0.0
#r_('4',_'5'): 0.0
#r_('5',_'2B'): 0.0
#rr_('1A',_'01A'): 0.0
#rr_('1B',_'01B'): 0.0
#rr_('2A',_'02A'): 0.0
#rr_('2B',_'02B'): 0.0
#rr_('3',_'03'): 0.0
#rr_('4',_'04'): 0.0
#rr_('5',_'05'): 0.0
#x_('0',_'1A'): 1.0
#x_('0',_'1B'): 1.0
#x_('0',_'2A'): 0.0
#x_('0',_'2B'): 0.0
#x_('0',_'3'): 1.0
#x_('0',_'4'): 0.0
#x_('0',_'5'): 0.0
#x_('1A',_'0'): 0.0
#x_('1A',_'2A'): 0.0
#x_('1A',_'2B'): 0.0
#x_('1A',_'3'): 0.0
#x_('1A',_'4'): 1.0
#x_('1A',_'5'): 0.0
#x_('1B',_'0'): 0.0
#x_('1B',_'2B'): 1.0
#x_('1B',_'3'): 0.0
#x_('1B',_'5'): 0.0
#x_('2A',_'0'): 1.0
#x_('2A',_'3'): 0.0
#x_('2A',_'5'): 0.0
#x_('2B',_'0'): 1.0
#x_('3',_'0'): 0.0
#x_('3',_'2B'): 0.0
#x_('3',_'5'): 1.0
#x_('4',_'0'): 0.0
#x_('4',_'2A'): 1.0
#x_('4',_'2B'): 0.0
#x_('4',_'5'): 0.0
#x_('5',_'0'): 1.0
#x_('5',_'2B'): 0.0


# LP file
model.writeLP("ISE247_Group9_Project_Code.lp")
# .lp File attached #
#\* ISE247_Group9_Project *\
#Minimize
#OBJ: 114 x_('0',_'1A') + 114 x_('0',_'1B') + 18 x_('0',_'2A')
 #+ 18 x_('0',_'2B') + 9 x_('0',_'3') + 96 x_('0',_'4') + 18 x_('0',_'5')
 #+ 114 x_('1A',_'0') + 99 x_('1A',_'2A') + 99 x_('1A',_'2B')
 #+ 120 x_('1A',_'3') + 180 x_('1A',_'4') + 129 x_('1A',_'5')
 #+ 114 x_('1B',_'0') + 99 x_('1B',_'2B') + 120 x_('1B',_'3')
 #+ 129 x_('1B',_'5') + 18 x_('2A',_'0') + 24 x_('2A',_'3') + 15 x_('2A',_'5')
 #+ 18 x_('2B',_'0') + 9 x_('3',_'0') + 24 x_('3',_'2B') + 21 x_('3',_'5')
 #+ 96 x_('4',_'0') + 96 x_('4',_'2A') + 96 x_('4',_'2B') + 111 x_('4',_'5')
 #+ 18 x_('5',_'0') + 15 x_('5',_'2B')
#Subject To
#_C1: x_('0',_'1A') = 1
#_C10: x_('2A',_'0') + x_('2A',_'3') + x_('2A',_'5') = 1
#_C100: b_0 = 250
#_C101: r_('0',_'1A') - x_('0',_'1A') <= 0
#_C102: r_('0',_'1B') - x_('0',_'1B') <= 0
#_C103: r_('0',_'2A') - x_('0',_'2A') <= 0
#_C104: r_('0',_'2B') - x_('0',_'2B') <= 0
#_C105: r_('0',_'3') - x_('0',_'3') <= 0
#_C106: r_('0',_'4') - x_('0',_'4') <= 0
#_C107: r_('0',_'5') - x_('0',_'5') <= 0
#_C108: r_('1A',_'2A') - x_('1A',_'2A') <= 0
#_C109: r_('1A',_'2B') - x_('1A',_'2B') <= 0
#_C11: x_('2B',_'0') = 1
#_C110: r_('1A',_'3') - x_('1A',_'3') <= 0
#_C111: r_('1A',_'4') - x_('1A',_'4') <= 0
#_C112: r_('1A',_'5') - x_('1A',_'5') <= 0
#_C113: r_('1B',_'2B') - x_('1B',_'2B') <= 0
#_C114: r_('1B',_'3') - x_('1B',_'3') <= 0
#_C115: r_('1B',_'5') - x_('1B',_'5') <= 0
#_C116: r_('2A',_'3') - x_('2A',_'3') <= 0
#_C117: r_('2A',_'5') - x_('2A',_'5') <= 0
#_C118: r_('3',_'2B') - x_('3',_'2B') <= 0
#_C119: r_('3',_'5') - x_('3',_'5') <= 0
#_C12: x_('3',_'0') + x_('3',_'2B') + x_('3',_'5') = 1
#_C120: r_('4',_'2A') - x_('4',_'2A') <= 0
#_C121: r_('4',_'2B') - x_('4',_'2B') <= 0
#_C122: r_('4',_'5') - x_('4',_'5') <= 0
#_C123: r_('5',_'2B') - x_('5',_'2B') <= 0
#_C124: rr_('1A',_'01A') - x_('1A',_'0') <= 0
#_C125: rr_('1B',_'01B') - x_('1B',_'0') <= 0
#_C126: rr_('2A',_'02A') - x_('2A',_'0') <= 0
#_C127: rr_('2B',_'02B') - x_('2B',_'0') <= 0
#_C128: rr_('3',_'03') - x_('3',_'0') <= 0
#_C129: rr_('4',_'04') - x_('4',_'0') <= 0
#_C13: x_('4',_'0') + x_('4',_'2A') + x_('4',_'2B') + x_('4',_'5') = 1
#_C130: rr_('5',_'05') - x_('5',_'0') <= 0
#_C131: - b_0 + b_1A - 250 r_('0',_'1A') + 250 x_('0',_'1A') <= 136
#_C132: - b_0 + b_1B - 250 r_('0',_'1B') + 250 x_('0',_'1B') <= 136
#_C133: - b_0 + b_2A - 250 r_('0',_'2A') + 250 x_('0',_'2A') <= 232
#_C134: - b_0 + b_2B - 250 r_('0',_'2B') + 250 x_('0',_'2B') <= 232
#_C135: - b_0 + b_3 - 250 r_('0',_'3') + 250 x_('0',_'3') <= 241
#_C136: - b_0 + b_4 - 250 r_('0',_'4') + 250 x_('0',_'4') <= 154
#_C137: - b_0 + b_5 - 250 r_('0',_'5') + 250 x_('0',_'5') <= 232
#_C138: - b_1A + b_2A - 250 r_('1A',_'2A') + 250 x_('1A',_'2A') <= 151
#_C139: - b_1A + b_2B - 250 r_('1A',_'2B') + 250 x_('1A',_'2B') <= 151
#_C14: x_('5',_'0') + x_('5',_'2B') = 1
#_C140: - b_1A + b_3 - 250 r_('1A',_'3') + 250 x_('1A',_'3') <= 130
#_C141: - b_1A + b_4 - 250 r_('1A',_'4') + 250 x_('1A',_'4') <= 70
#_C142: - b_1A + b_5 - 250 r_('1A',_'5') + 250 x_('1A',_'5') <= 121
#_C143: - b_1B + b_2B - 250 r_('1B',_'2B') + 250 x_('1B',_'2B') <= 151
#_C144: - b_1B + b_3 - 250 r_('1B',_'3') + 250 x_('1B',_'3') <= 130
#_C145: - b_1B + b_5 - 250 r_('1B',_'5') + 250 x_('1B',_'5') <= 121
#_C146: - b_2A + b_3 - 250 r_('2A',_'3') + 250 x_('2A',_'3') <= 226
#_C147: - b_2A + b_5 - 250 r_('2A',_'5') + 250 x_('2A',_'5') <= 235
#_C148: b_2B - b_3 - 250 r_('3',_'2B') + 250 x_('3',_'2B') <= 226
#_C149: - b_3 + b_5 - 250 r_('3',_'5') + 250 x_('3',_'5') <= 229
#_C15: V_0 = 0
#_C150: b_2A - b_4 - 250 r_('4',_'2A') + 250 x_('4',_'2A') <= 154
#_C151: b_2B - b_4 - 250 r_('4',_'2B') + 250 x_('4',_'2B') <= 154
#_C152: - b_4 + b_5 - 250 r_('4',_'5') + 250 x_('4',_'5') <= 139
#_C153: b_2B - b_5 - 250 r_('5',_'2B') + 250 x_('5',_'2B') <= 235
#_C154: - b_0 + b_1A - 250 r_('0',_'1A') - 250 x_('0',_'1A') >= -364
#_C155: - b_0 + b_1B - 250 r_('0',_'1B') - 250 x_('0',_'1B') >= -364
#_C156: - b_0 + b_2A - 250 r_('0',_'2A') - 250 x_('0',_'2A') >= -268
#_C157: - b_0 + b_2B - 250 r_('0',_'2B') - 250 x_('0',_'2B') >= -268
#_C158: - b_0 + b_3 - 250 r_('0',_'3') - 250 x_('0',_'3') >= -259
#_C159: - b_0 + b_4 - 250 r_('0',_'4') - 250 x_('0',_'4') >= -346
#_C16: - V_0 + Y_('0',_'1A') <= 0
#_C160: - b_0 + b_5 - 250 r_('0',_'5') - 250 x_('0',_'5') >= -268
#_C161: - b_1A + b_2A - 250 r_('1A',_'2A') - 250 x_('1A',_'2A') >= -349
#_C162: - b_1A + b_2B - 250 r_('1A',_'2B') - 250 x_('1A',_'2B') >= -349
#_C163: - b_1A + b_3 - 250 r_('1A',_'3') - 250 x_('1A',_'3') >= -370
#_C164: - b_1A + b_4 - 250 r_('1A',_'4') - 250 x_('1A',_'4') >= -430
#_C165: - b_1A + b_5 - 250 r_('1A',_'5') - 250 x_('1A',_'5') >= -379
#_C166: - b_1B + b_2B - 250 r_('1B',_'2B') - 250 x_('1B',_'2B') >= -349
#_C167: - b_1B + b_3 - 250 r_('1B',_'3') - 250 x_('1B',_'3') >= -370
#_C168: - b_1B + b_5 - 250 r_('1B',_'5') - 250 x_('1B',_'5') >= -379
#_C169: - b_2A + b_3 - 250 r_('2A',_'3') - 250 x_('2A',_'3') >= -274
#_C17: - V_0 + Y_('0',_'1B') <= 0
#_C170: - b_2A + b_5 - 250 r_('2A',_'5') - 250 x_('2A',_'5') >= -265
#_C171: b_2B - b_3 - 250 r_('3',_'2B') - 250 x_('3',_'2B') >= -274
#_C172: - b_3 + b_5 - 250 r_('3',_'5') - 250 x_('3',_'5') >= -271
#_C173: b_2A - b_4 - 250 r_('4',_'2A') - 250 x_('4',_'2A') >= -346
#_C174: b_2B - b_4 - 250 r_('4',_'2B') - 250 x_('4',_'2B') >= -346
#_C175: - b_4 + b_5 - 250 r_('4',_'5') - 250 x_('4',_'5') >= -361
#_C176: b_2B - b_5 - 250 r_('5',_'2B') - 250 x_('5',_'2B') >= -265
#_C177: b_01A - b_1A - 250 rr_('1A',_'01A') + 250 x_('1A',_'0') <= 136
#_C178: b_01B - b_1B - 250 rr_('1B',_'01B') + 250 x_('1B',_'0') <= 136
#_C179: b_02A - b_2A - 250 rr_('2A',_'02A') + 250 x_('2A',_'0') <= 232
#_C18: - V_0 + Y_('0',_'2A') <= 0
#_C180: b_02B - b_2B - 250 rr_('2B',_'02B') + 250 x_('2B',_'0') <= 232
#_C181: b_03 - b_3 - 250 rr_('3',_'03') + 250 x_('3',_'0') <= 241
#_C182: b_04 - b_4 - 250 rr_('4',_'04') + 250 x_('4',_'0') <= 154
#_C183: b_05 - b_5 - 250 rr_('5',_'05') + 250 x_('5',_'0') <= 232
#_C184: b_01A - b_1A - 250 rr_('1A',_'01A') - 250 x_('1A',_'0') >= -364
#_C185: b_01B - b_1B - 250 rr_('1B',_'01B') - 250 x_('1B',_'0') >= -364
#_C186: b_02A - b_2A - 250 rr_('2A',_'02A') - 250 x_('2A',_'0') >= -268
#_C187: b_02B - b_2B - 250 rr_('2B',_'02B') - 250 x_('2B',_'0') >= -268
#_C188: b_03 - b_3 - 250 rr_('3',_'03') - 250 x_('3',_'0') >= -259
#_C189: b_04 - b_4 - 250 rr_('4',_'04') - 250 x_('4',_'0') >= -346
#_C19: - V_0 + Y_('0',_'2B') <= 0
#_C190: b_05 - b_5 - 250 rr_('5',_'05') - 250 x_('5',_'0') >= -268
#_C191: b_0 + 250 r_('0',_'1A') <= 369.01
#_C192: b_0 + 250 r_('0',_'1B') <= 369.01
#_C193: b_0 + 250 r_('0',_'2A') <= 273.01
#_C194: b_0 + 250 r_('0',_'2B') <= 273.01
#_C195: b_0 + 250 r_('0',_'3') <= 264.01
#_C196: b_0 + 250 r_('0',_'4') <= 351.01
#_C197: b_0 + 250 r_('0',_'5') <= 273.01
#_C198: b_1A + 250 r_('1A',_'2A') <= 354.01
#_C199: b_1A + 250 r_('1A',_'2B') <= 354.01
#_C2: x_('0',_'1B') = 1
#_C20: - V_0 + Y_('0',_'3') <= 0
#_C200: b_1A + 250 r_('1A',_'3') <= 375.01
#_C201: b_1A + 250 r_('1A',_'4') <= 435.01
#_C202: b_1A + 250 r_('1A',_'5') <= 384.01
#_C203: b_1B + 250 r_('1B',_'2B') <= 354.01
#_C204: b_1B + 250 r_('1B',_'3') <= 375.01
#_C205: b_1B + 250 r_('1B',_'5') <= 384.01
#_C206: b_2A + 250 r_('2A',_'3') <= 279.01
#_C207: b_2A + 250 r_('2A',_'5') <= 270.01
#_C208: b_3 + 250 r_('3',_'2B') <= 279.01
#_C209: b_3 + 250 r_('3',_'5') <= 276.01
#_C21: - V_0 + Y_('0',_'4') <= 0
#_C210: b_4 + 250 r_('4',_'2A') <= 351.01
#_C211: b_4 + 250 r_('4',_'2B') <= 351.01
#_C212: b_4 + 250 r_('4',_'5') <= 366.01
#_C213: b_5 + 250 r_('5',_'2B') <= 270.01
#_C214: b_1A + 250 rr_('1A',_'01A') <= 369.01
#_C215: b_1B + 250 rr_('1B',_'01B') <= 369.01
#_C216: b_2A + 250 rr_('2A',_'02A') <= 273.01
#_C217: b_2B + 250 rr_('2B',_'02B') <= 273.01
#_C218: b_3 + 250 rr_('3',_'03') <= 264.01
#_C219: b_4 + 250 rr_('4',_'04') <= 351.01
#_C22: - V_0 + Y_('0',_'5') <= 0
#_C220: b_5 + 250 rr_('5',_'05') <= 273.01
#_C23: - V_1A + Y_('1A',_'2A') <= 0
#_C24: - V_1A + Y_('1A',_'2B') <= 0
#_C25: - V_1A + Y_('1A',_'3') <= 0
#_C26: - V_1A + Y_('1A',_'4') <= 0
#_C27: - V_1A + Y_('1A',_'5') <= 0
#_C28: - V_1B + Y_('1B',_'2B') <= 0
#_C29: - V_1B + Y_('1B',_'3') <= 0
#_C3: x_('0',_'2A') + x_('1A',_'2A') + x_('4',_'2A') = 1
#_C30: - V_1B + Y_('1B',_'5') <= 0
#_C31: - V_2A + Y_('2A',_'3') <= 0
#_C32: - V_2A + Y_('2A',_'5') <= 0
#_C33: - V_3 + Y_('3',_'2B') <= 0
#_C34: - V_3 + Y_('3',_'5') <= 0
#_C35: - V_4 + Y_('4',_'2A') <= 0
#_C36: - V_4 + Y_('4',_'2B') <= 0
#_C37: - V_4 + Y_('4',_'5') <= 0
#_C38: - V_5 + Y_('5',_'2B') <= 0
#_C39: - V_0 + Y_('0',_'1A') - 30 x_('0',_'1A') >= -30
#_C4: x_('0',_'2B') + x_('1A',_'2B') + x_('1B',_'2B') + x_('3',_'2B')+ x_('4',_'2B') + x_('5',_'2B') = 1
#_C40: - V_0 + Y_('0',_'1B') - 30 x_('0',_'1B') >= -30
#_C41: - V_0 + Y_('0',_'2A') - 30 x_('0',_'2A') >= -30
#_C42: - V_0 + Y_('0',_'2B') - 30 x_('0',_'2B') >= -30
#_C43: - V_0 + Y_('0',_'3') - 30 x_('0',_'3') >= -30
#_C44: - V_0 + Y_('0',_'4') - 30 x_('0',_'4') >= -30
#_C45: - V_0 + Y_('0',_'5') - 30 x_('0',_'5') >= -30
#_C46: - V_1A + Y_('1A',_'2A') - 30 x_('1A',_'2A') >= -30
#_C47: - V_1A + Y_('1A',_'2B') - 30 x_('1A',_'2B') >= -30
#_C48: - V_1A + Y_('1A',_'3') - 30 x_('1A',_'3') >= -30
#_C49: - V_1A + Y_('1A',_'4') - 30 x_('1A',_'4') >= -30
#_C5: x_('0',_'3') + x_('1A',_'3') + x_('1B',_'3') + x_('2A',_'3') = 1
#_C50: - V_1A + Y_('1A',_'5') - 30 x_('1A',_'5') >= -30
#_C51: - V_1B + Y_('1B',_'2B') - 30 x_('1B',_'2B') >= -30
#_C52: - V_1B + Y_('1B',_'3') - 30 x_('1B',_'3') >= -30
#_C53: - V_1B + Y_('1B',_'5') - 30 x_('1B',_'5') >= -30
#_C54: - V_2A + Y_('2A',_'3') - 30 x_('2A',_'3') >= -30
#_C55: - V_2A + Y_('2A',_'5') - 30 x_('2A',_'5') >= -30
#_C56: - V_3 + Y_('3',_'2B') - 30 x_('3',_'2B') >= -30
#_C57: - V_3 + Y_('3',_'5') - 30 x_('3',_'5') >= -30
#_C58: - V_4 + Y_('4',_'2A') - 30 x_('4',_'2A') >= -30
#_C59: - V_4 + Y_('4',_'2B') - 30 x_('4',_'2B') >= -30
#_C6: x_('0',_'4') + x_('1A',_'4') = 1
#_C60: - V_4 + Y_('4',_'5') - 30 x_('4',_'5') >= -30
#_C61: - V_5 + Y_('5',_'2B') - 30 x_('5',_'2B') >= -30
#_C62: Y_('0',_'1A') - 30 x_('0',_'1A') <= 0
#_C63: Y_('0',_'1B') - 30 x_('0',_'1B') <= 0
#_C64: Y_('0',_'2A') - 30 x_('0',_'2A') <= 0
#_C65: Y_('0',_'2B') - 30 x_('0',_'2B') <= 0
#_C66: Y_('0',_'3') - 30 x_('0',_'3') <= 0
#_C67: Y_('0',_'4') - 30 x_('0',_'4') <= 0
#_C68: Y_('0',_'5') - 30 x_('0',_'5') <= 0
#_C69: Y_('1A',_'2A') - 30 x_('1A',_'2A') <= 0
#_C7: x_('0',_'5') + x_('1A',_'5') + x_('1B',_'5') + x_('2A',_'5') + x_('3',_'5') + x_('4',_'5') = 1
#_C70: Y_('1A',_'2B') - 30 x_('1A',_'2B') <= 0
#_C71: Y_('1A',_'3') - 30 x_('1A',_'3') <= 0
#_C72: Y_('1A',_'4') - 30 x_('1A',_'4') <= 0
#_C73: Y_('1A',_'5') - 30 x_('1A',_'5') <= 0
#_C74: Y_('1B',_'2B') - 30 x_('1B',_'2B') <= 0
#_C75: Y_('1B',_'3') - 30 x_('1B',_'3') <= 0
#_C76: Y_('1B',_'5') - 30 x_('1B',_'5') <= 0
#_C77: Y_('2A',_'3') - 30 x_('2A',_'3') <= 0
#_C78: Y_('2A',_'5') - 30 x_('2A',_'5') <= 0
#_C79: Y_('3',_'2B') - 30 x_('3',_'2B') <= 0
#_C8: x_('1A',_'0') + x_('1A',_'2A') + x_('1A',_'2B') + x_('1A',_'3') + x_('1A',_'4') + x_('1A',_'5') = 1
#_C80: Y_('3',_'5') - 30 x_('3',_'5') <= 0
#_C81: Y_('4',_'2A') - 30 x_('4',_'2A') <= 0
#_C82: Y_('4',_'2B') - 30 x_('4',_'2B') <= 0
#_C83: Y_('4',_'5') - 30 x_('4',_'5') <= 0
#_C84: Y_('5',_'2B') - 30 x_('5',_'2B') <= 0
#_C85: V_1A - Y_('0',_'1A') = 10
#_C86: V_1B - Y_('0',_'1B') = 15
#_C87: V_2A - Y_('0',_'2A') - Y_('1A',_'2A') - Y_('4',_'2A') = 8
#_C88: V_2B - Y_('0',_'2B') - Y_('1A',_'2B') - Y_('1B',_'2B') - Y_('3',_'2B') - Y_('4',_'2B') - Y_('5',_'2B') = 6
#_C89: V_3 - Y_('0',_'3') - Y_('1A',_'3') - Y_('1B',_'3') - Y_('2A',_'3') = 7
#_C9: x_('1B',_'0') + x_('1B',_'2B') + x_('1B',_'3') + x_('1B',_'5') = 1
#_C90: V_4 - Y_('0',_'4') - Y_('1A',_'4') = 12
#_C91: V_5 - Y_('0',_'5') - Y_('1A',_'5') - Y_('1B',_'5') - Y_('2A',_'5') - Y_('3',_'5') - Y_('4',_'5') = 20
#_C92: V_0 <= 30
#_C93: V_1A <= 30
#_C94: V_1B <= 30
#_C95: V_2A <= 30
#_C96: V_2B <= 30
#_C97: V_3 <= 30
#_C98: V_4 <= 30
#_C99: V_5 <= 30
#Bounds
 #V_0 <= 30
 #V_1A <= 30
#V_1B <= 30
 #V_2A <= 30
 #V_2B <= 30
 #V_3 <= 30
#V_4 <= 30
 #V_5 <= 30
 #b_0 <= 250
 #b_01A <= 250
 #b_01B <= 250
 #b_02A <= 250
 #b_02B <= 250
 #b_03 <= 250
 #b_04 <= 250
 #b_05 <= 250
 #b_1A <= 250
 #b_1B <= 250
 #b_2A <= 250
 #b_2B <= 250
 #b_3 <= 250
 #b_4 <= 250
 #b_5 <= 250
#Binaries
#r_('0',_'1A')
#r_('0',_'1B')
#r_('0',_'2A')
#r_('0',_'2B')
#r_('0',_'3')
#r_('0',_'4')
#r_('0',_'5')
#r_('1A',_'2A')
#r_('1A',_'2B')
#r_('1A',_'3')
#r_('1A',_'4')
#r_('1A',_'5')
#r_('1B',_'2B')
#r_('1B',_'3')
#r_('1B',_'5')
#r_('2A',_'3')
#r_('2A',_'5')
#r_('3',_'2B')
#r_('3',_'5')
#r_('4',_'2A')
#r_('4',_'2B')
#r_('4',_'5')
#r_('5',_'2B')
#rr_('1A',_'01A')
#rr_('1B',_'01B')
#rr_('2A',_'02A')
#rr_('2B',_'02B')
#rr_('3',_'03')
#rr_('4',_'04')
#rr_('5',_'05')
#x_('0',_'1A')
#x_('0',_'1B')
#x_('0',_'2A')
#x_('0',_'2B')
#x_('0',_'3')
#x_('0',_'4')
#x_('0',_'5')
#x_('1A',_'0')
#x_('1A',_'2A')
#x_('1A',_'2B')
#x_('1A',_'3')
#x_('1A',_'4')
#x_('1A',_'5')
#x_('1B',_'0')
#x_('1B',_'2B')
#x_('1B',_'3')
#x_('1B',_'5')
#x_('2A',_'0')
#x_('2A',_'3')
#x_('2A',_'5')
#x_('2B',_'0')
#x_('3',_'0')
#x_('3',_'2B')
#x_('3',_'5')
#x_('4',_'0')
#x_('4',_'2A')
#x_('4',_'2B')
#x_('4',_'5')
#x_('5',_'0')
#x_('5',_'2B')
#End
